@chapter History

@section Release Beta 19 (Feb 26 1998)
@include changes.texinfo

@section Release Beta 18 (May 6 1997)

This is a major release.  The new cygwin.dll is still
backwards-compatible with previously linked applications but
contains significant changes.

We have completely changed the installation process to make
use of an InstallShield5-based installer.  This should reduce the
number of installation problems people have experienced in the
past.  However, it is still necessary to set environment variables
by hand, as explained in the README.txt accompanying the distribution.
(Future gnu-win32 installers may include the capability to do this
automatically).

@subsection Changes in specific tools:

GCC compilation times have been improved by 20-30% by using spawn()
instead of fork().

GCC accepts both Win32 and POSIX paths/path lists in its
environment variables (COMPILER_PATH, LIBRARY_PATH, C_INCLUDE_PATH,
CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH)

GDB comes with a tcl/tk-based GUI (gdbtk).  You can still invoke the
command line gdb by invoking it with "gdb -nw".

Bash verifies that /tmp exists and is a directory upon startup.
It complains if this isn't the case.

Running gcc or ld with "-s" used to create invalid executables.
The bug in bfd that was responsible for this has been fixed.

The conflict between String.h and string.h (and other such pairs
of header files) where you include one and get the other has been
fixed.

The top level install-sh script tries to install foo.exe if asked
to install foo when foo's not present.  This fixes many installs
of Unix software.

Dlltool has preliminary support for the IMPORT declaration in .def files
when invoked with -I.  Feel free to experiment with it but once this
functionality is tested more extensively this flag may go away.

Time is upgraded to version 1.7.

Make is upgraded to version 3.75.

Make accepts both Win32 and POSIX path lists in the VPATH variable.

@subsection Changes in the Cygwin32 API (cygwin.dll):

The following is now supported:

* UNC paths
* Reverse index escapes in console code
* Blocking select()s on a combination of sockets/handles
* Directory symlinks.
* Reparenting of child processes.

The following calls have been added:

* mmap(), mprotect(), msync(), munmap().  fork() changed to support these.
* fsync(), statfs(), fstatfs().
* getprotobynumber() and getservbyport().
* get_osfhandle(), cwait().
* spawnl(), spawnle(), spawnlp(), spawnlpe(), spawnv(), spawnve(),
spawnvp(), spawnvpe().
* nice().
* sigpending(), sigsuspend()
* Under NT only, chown(), getgrgid(), getgrnam(), endgrent(), getgrent(),
setpwend(), getpwent(), endpwent().  Win95 still has these as stubs.

Significantly better signals / exception handling support added.
The kill signal works much better now (control-C works in bash).

Shell scripts now run the shell specified after the #! instead of
always defaulting to /bin/sh.

Floating point registers are now properly initialized in the crt0.o.

Opening non-disk files such as com ports no longer check to see
if they are symlinks or executables.

The console title now is set to the name of the running process.

Winsock is now initialized upon app startup.

Moved reent_data from private address space to cygwin.dll.

The system() call now invokes spawnvp() instead of fork()/exec().

Support for NT extended attributes has been added but is disabled
for now because it slowed things down too much.  We want to use them to
remember info about symlink and executable status of files.

Under NT only, utilities mkpasswd and mkgroup can generate a valid
/etc/passwd and /etc/group.

Earlier releases stored mount points in the registry under
"Cygnus Support".  This changed to "Cygnus Solutions" starting
with beta 18.  Either use a registry editor (regedit under NT)
to rename the old entry or just redo your mount points and the
cygwin.dll will automatically create the new one for you.

Mount points can now be up to MAX_PATH in length instead of 30
characters.

@section Release Beta 17.1 (Dec 10 1996)

A patch has been applied to make Win 95 configure work again.

ld has been changed to make "a.exe" be the default executable name.

@section Release Beta 17 (Dec 7 1996)

It is now possible to rebuild the tools natively under x86 NT when
the full Cygnus Developers' Kit (CDK) and the User Tools are both
installed correctly.

While the cygwin.dll underwent substantial changes, none of them
prevent you from using previously built applications  The new dll
is compatible with beta 16 to the best of our knowledge.  Beta 14-built
programs will continue to fail with the beta 17 dll -- you will have to
relink them before they will work.

The winsup files that make up the Cygwin32 API are now under the
GNU General Public License.  See the accompanying press release
for more information.

@subsection Changes in specific tools:

Gcc now links by default against -lkernel32 and also against
-luser32 -lgdi32 -lcomdlg32 when mwindows is set.  Another major
change is that when creating an executable, gcc will now create
foo.exe when given a -o argument of foo.

Dlltool has patches to make it better handle the --subsystem argument
that allows choosing console vs. GUI among other options.
ld has been changed to have a much larger stack reserve size.  This
is necessary when rebuilding the toolchain natively under NT.

The C++ headers can now be found given a correctly set GCC_EXEC_PREFIX
environment variable.

New versions of fileutils and make are included.  Findutils has been
added.

@subsection Changes in the Cygwin32 API (cygwin.dll):

Scott Christley's headers and def files for the standard Win32 dlls
have been integrated.  Anything present only in the previous Cygnus headers
has been added in the appropriate places.  There are placeholder files
with the standard Win32 header names that pull in our headers so
programs that try to include specific headers should continue to work.
Having more complete headers should make Win32 native programming
easier.

Select has been rewritten from scratch.  The new one can deal with
all sockets, handles and sockets always ready, all handles.  Handles
and sockets with timeout not implemented yet.  Select now does
blocking and doesn't spin cpu.

File handling has been largely rewritten:
The fhandler array has been moved into local memory instead of shared
memory.  This makes a number of things behave better.  Lots of changes
to support this.  There is now fairly complete ansi/vt100 console support.
Some new file locking support has been added.  Arrow keys are now
supported.

Process handling much improved.

Significant serious bugs in fork() fixed.

The system() call now works.

unlink() now chmods read-only files to writable before attempting to
delete a file.  This fixes the outstanding problem where rm can't
delete read-only files saying "out of queue slots" repeatedly.

Text mode read has been rewritten.

New syslog code allows logging to event log under NT, file under Win 95.

Symlinks are enabled.

readv() and writev() have been written and exported.

For MS compatibility, we now export functions in the dll as _funcname
in addition to funcname.  I would suggest not making use of this fact
unless you are building code that already accesses C library calls
in this way.

Almost all of the source code is now in C++ files.

@section Release Beta 16 (Aug 30 1996)

Path handling has been completely rewritten.  To refer to drive Q: in
bash, you can now refer to //q/.  Alternatively, type "mount Q: /q" to
have drive Q: show up as /q.

We now pass the Plum Hall positive C conformance tests on the
i386 under Windows 95 and NT 4.0b2.

Fork was previously not accessible inside the dll.  This is no
longer the case which should allow us to add working system and popen
calls.

getdomainname works (it used to just return "cygnus.com") by getting
information from registry.

Fixed readdir bug that set errno improperly.  This fixed the problem
with diff not working across directories.

Better error checking in signal functions.  Initialize winsock in
cygwin32_socket with checkinit call (fixes bug that required calling any
function that did this first).

New functions: sigaddset, sigismember, sigfillset, sigemptyset.

Removed extra underscores present in sysdef files.

There is a now a major and a minor version number associated with
the cygwin.dll.  The major number changes only when incompatible changes
are made, the minor number changes when significant changes are made
to the dll that don't require relinking of old apps.

Changed value of HZ in include/sys/param.h to correct value of 1000.
(Fixes bug people reported about "time sleep 5" returning 50).

Assorted exception handling fixes for both i386 and ppc processors.

Assorted time-related fixes required for Cygnus Kerberos work.
New time functions: gmtime, corelocaltime

Assorted spawn and fork fixes.

Pseudo-Unix process handling added -- new ps and kill commands added

Control-Z's are now handled as a valid EOF token in files opened as
text.
lseek now always operates in binary mode.

Select revamped.

Various other changes.  For more detailed information, consult the file
in the source code winsup/ChangeLog.

Preprocessor define scheme changed.  Apps should now use _WIN32
instead of __WIN32__ to check for access to Win32 API and __CYGWIN32__
to check for presence of the Cygwin32 environment.

We are no longer including GNU findutils, GNU dbm, GNU bison,
GNU less, ncurses, ftp, finger, rcl, cvtres, or V.  This may or may not
change in the future.

You must relink old apps you built with prior releases with the new
cygwin.dll.

@section Release Beta 14 (April 10 1996)

Some bugs have been fixed.  GDBM and m4 are in the release.  GCC now
uses the standard install directories for cc1 etc.

A port of V to gnu-win32 is included.  You can now write graphics
applications which will run on Unix or Windows unchanged.  Some parts of
V work on the PPC too.

If you call any programs from the standard DOS shell, then the DLL will
expand all the wildcards (glob) found in the arguments on the command
line.  So ls *.exe will do what you think it should, even if you're not
in bash.

ncurses and less are included. The DLL's emulation of a vt100 isn't complete,
so ncurses doesn't do all that it should. Hence less is more or less
useless.  This can be fixed with a new DLL.  (If you want to use
something which uses curses, be sure to set your TERM and HOME
envirionment variables)

If you leave out main, then the libraries will try and call WinMain in the
usual way.

^C works much better on Windows 95.  It's still not quite right, but at
least most times it quits what you're doing, and most times doesn't
crash your machine.

You can start more than one concurrent bash session. 

Some networking support has been added.  Even though telnet.exe is provided,
I know that it doesn't work, so please don't send me bug reports.

You will have to relink your applications to go with the new DLL.

The DLL is released in its own .zip file too, so you don't have to
download a load of other stuff if you dont want to.

@section Release Beta 13 (Feb 9 1996)

Files are opened in binary mode, unless the registry is fiddled with.

The `cat >foo <<EOF bug is fixed.

The symlink cookie has changed, so old links wont work any more.

Two resource tools are provided (untested).

More windows header files are provided. WxWindows almost compiles.

You can get to a raw floppy with `/dev/fd0 or `/dev/fd1.

You can have two filenames with the same name and different case in
the same directory.

Stat now fills in the st_nlink field for directories, so find works
better.

This version is much more stable than any previous version, and will
stay running long enough to configure and build itself on my NT box.

This version is also available in PowerPC versions.  The PowerPC
compiler doesn't do stack probing, so some applications won't work, or
they'll only work on some input data - e.g. the demo "hello world" will
compile, but gcc will crash compiling the dhrystone benchmark.

There's a new registry variable "fmode=binary" which controls
whether the tools always open files in binary mode (unless overridden
with O_TEXT), or always open files in text mode (unless overridden with
O_BINARY).

Filesystems can be mounted with the mixed_case flag.  This allows
you to use filenames with the same spelling, but different case in the
same directory.

I haven't tested or even used some of the packages that I've
provided.  I compiled them, and then fixed the obvious "the file should
have been opened in binary mode" problems.

I've already had reports of some of it not working correctly on
Windows 95.  I don't have a simple to use Windows 95 configuration, but
when I did try "it worked for me".  This may be another manifestation
of the bug which makes bash hang sometimes under NT.

@section Release Beta 12 (Jan 3 1996)

You can call non- gnu-win32 applications from bash.

You can mount other directories using the @code{mount} command.

Minimal ANSI terminal emulation included.

Packages split into smaller and more logical lumps.

/d<name> mechanism gone.

Initial support for the PowerPC added.

@section Release Beta 11 (Jan 3 1996)

Something broke on the way to the ftp site.

@section Release Beta 10 (Dec 5 1995)

You can pass environment variables around in bash.

Lots more stuff provided precompiled.

Diffs to standard FSF release provided.

It self-hosts.

It supports symbolic links.

The directory layout has changed to be more unix like.

The way that you get to non-c drives is new - i:\foo.cc
is now /di/foo.cc

Nasty bug found and fixed in fork.

CPP will now search the directories you supply in env names.

@section Release Beta 9

I've put all of libc and libm into a shared library,
This drastically reduces the size of some binaries.
e.g., ls goes from 82,949 bytes to 26,624.
"Hello World" is 2564 bytes long.
This is the first stage in greatly speeding up 
some of the stuff that's going on behind the curtain.

Different processes communicate using shared memory.

Some trivial use of the registry is made.

DLLTOOL is now *much* faster.

Some small problems have been fixed in the way that DLLs were
layed out.	

@section Release Beta 8

GDB works.

GCC now emits debug info which can make **huge** executables
Fortunately, strip works too.

More work has been done to make quoting work.

Simple termios support added to newlib.

Much nicer way of describing paths, eg //c/foo is c:\foo.

@section Release Beta 7

Works again on Win 95 (which is why -6 wasn't advertised).

Permissions are faked better.

Source of demos available without having to ftp the entire win32
binary tree. 

@section Release Beta 6

Can now generate DLLs, tiny demo included.
tcl, byacc, fileutils, diff, make included.

@section Release Beta 5

Bug preventing anything from running on recent versions
of Win95 fixed.

vfork and exec oddities fixed.

Import libraries are now really libraries and not
just .o files.

Debugging info stripped from images and libraries;
it's just bloat until gdb works.

I've filled in the four major import libraries.

The win*.h files are now installed into <foo>/include
rather that <foo>/include/sys, so more things will
compile out of the box.

@section Release Beta 4

PE support is fixed. Programs run on
NT 3.1, NT 3.5, NT 3.51 and Windows 95.

You can build GUI programs.

.DEF files for three other DLL's started.

New GUI demo program. 

C library distinguishes between text and binary files
consequently the text files generated by the
tools have the familiar ^M at the end of the line
which DOS likes so much.

Doug Evans of Cygnus has added a load
of fancy support for execve, opendir and 
various other cool things.

Exception handling is better.

@section Release Beta 3

Was so long ago we don't remember.
